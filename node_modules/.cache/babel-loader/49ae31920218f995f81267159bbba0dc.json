{"ast":null,"code":"import Axios from \"axios\";\nimport { store } from \"..\";\nimport { DOMAIN, TOKEN_CYBERSOFT } from \"../configUrl/configURL\";\nimport { set_spinner_end, set_spinner_start } from \"../redux/Actions/spinnerActions\"; // import { store } from \"../index\";\n//import { set_spinner_end, set_spinner_start } from \"../redux/action/spinnerAction\";\n\nimport localStorageServ from \"./locaStorage.service\";\n\nclass AxiosService {\n  constructor(params) {\n    this.getAxiosConfig = _token => {\n      var _localStorageServ$use;\n\n      // const token = _token ? _token : localStorageServ.accessToken.get();\n      this.axiosConfig = {\n        headers: {\n          tokenByClass: TOKEN_CYBERSOFT,\n          token: (_localStorageServ$use = localStorageServ.userInfor.get()) === null || _localStorageServ$use === void 0 ? void 0 : _localStorageServ$use.token,\n          token: localStorageServ.token.get() // Authorization: \"bearer \" + localStorageServ.tokenAdmin.get(),\n\n        }\n      };\n    };\n\n    this.removeAxiosConfig = () => {\n      this.axiosConfig = {\n        headers: {\n          iKeapy: ``,\n          \"Content-Type\": \"application/json\"\n        }\n      };\n    };\n\n    this.handleError = err => {\n      var _err$response;\n\n      const status = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status;\n\n      switch (status // case 400:\n      // case 401:\n      // case 403:\n      //   window.location.assign(\"/lms\");\n      //   break;\n      // default:\n      //   break;\n      ) {}\n    };\n\n    this.axiosInstance = req => {\n      this.axios(req, this.axiosConfig);\n    };\n\n    this.axios = Axios.create({\n      baseURL: this.getBaseUrl()\n    });\n    this.getAxiosConfig();\n  }\n\n  getBaseUrl() {\n    return DOMAIN;\n  }\n\n  getMethod(url) {\n    let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.handleFlow(this.axios.get(url, this.axiosConfig), loading);\n  }\n\n  postMethod(url, data) {\n    let loading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.handleFlow(this.axios.post(url, data, this.axiosConfig), loading);\n  }\n\n  putMethod(url, data) {\n    let loading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.handleFlow(this.axios.put(url, data, this.axiosConfig), loading);\n  }\n\n  patchMethod(url, data) {\n    let loading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.handleFlow(this.axios.patch(url, data, this.axiosConfig), loading);\n  }\n\n  deleteMothod(url) {\n    let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.handleFlow(this.axios.delete(url, this.axiosConfig), loading);\n  }\n\n  handleFlow(method) {\n    let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    store.dispatch(set_spinner_start());\n    return new Promise((resolve, reject) => {\n      method.then(res => {\n        store.dispatch(set_spinner_end());\n        resolve({\n          data: res.data,\n          status: res.status,\n          isSuccess: true\n        });\n      }).catch(err => {\n        store.dispatch(set_spinner_end());\n        this.handleError(err);\n        reject({\n          err: err\n        });\n      });\n    });\n  }\n\n}\n\nconst AxiosServ = new AxiosService();\nexport default AxiosServ;","map":{"version":3,"sources":["C:/Users/siuhuynh/Desktop/BC-18/DU-AN-CUOI-KHOA/Airbnb-CLone/Air-Bnb-modal/Air-Bnb-modal/src/serviceWorker/axios.service.js"],"names":["Axios","store","DOMAIN","TOKEN_CYBERSOFT","set_spinner_end","set_spinner_start","localStorageServ","AxiosService","constructor","params","getAxiosConfig","_token","axiosConfig","headers","tokenByClass","token","userInfor","get","removeAxiosConfig","iKeapy","handleError","err","status","response","axiosInstance","req","axios","create","baseURL","getBaseUrl","getMethod","url","loading","handleFlow","postMethod","data","post","putMethod","put","patchMethod","patch","deleteMothod","delete","method","dispatch","Promise","resolve","reject","then","res","isSuccess","catch","AxiosServ"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { store } from \"..\";\r\nimport { DOMAIN, TOKEN_CYBERSOFT } from \"../configUrl/configURL\";\r\nimport {\r\n  set_spinner_end,\r\n  set_spinner_start,\r\n} from \"../redux/Actions/spinnerActions\";\r\n// import { store } from \"../index\";\r\n\r\n//import { set_spinner_end, set_spinner_start } from \"../redux/action/spinnerAction\";\r\nimport localStorageServ from \"./locaStorage.service\";\r\n\r\nclass AxiosService {\r\n  axios;\r\n  axiosConfig;\r\n  authService;\r\n  constructor(params) {\r\n    this.axios = Axios.create({\r\n      baseURL: this.getBaseUrl(),\r\n    });\r\n    this.getAxiosConfig();\r\n  }\r\n\r\n  getBaseUrl() {\r\n    return DOMAIN;\r\n  }\r\n\r\n  getAxiosConfig = (_token) => {\r\n    // const token = _token ? _token : localStorageServ.accessToken.get();\r\n    this.axiosConfig = {\r\n      headers: {\r\n        tokenByClass: TOKEN_CYBERSOFT,\r\n        token: localStorageServ.userInfor.get()?.token,\r\n        token: localStorageServ.token.get(),\r\n        // Authorization: \"bearer \" + localStorageServ.tokenAdmin.get(),\r\n      },\r\n    };\r\n  };\r\n\r\n  removeAxiosConfig = () => {\r\n    this.axiosConfig = {\r\n      headers: {\r\n        iKeapy: ``,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n  };\r\n\r\n  getMethod(url, loading = true) {\r\n    return this.handleFlow(this.axios.get(url, this.axiosConfig), loading);\r\n  }\r\n\r\n  postMethod(url, data, loading = true) {\r\n    return this.handleFlow(\r\n      this.axios.post(url, data, this.axiosConfig),\r\n      loading\r\n    );\r\n  }\r\n\r\n  putMethod(url, data, loading = true) {\r\n    return this.handleFlow(\r\n      this.axios.put(url, data, this.axiosConfig),\r\n      loading\r\n    );\r\n  }\r\n\r\n  patchMethod(url, data, loading = true) {\r\n    return this.handleFlow(\r\n      this.axios.patch(url, data, this.axiosConfig),\r\n      loading\r\n    );\r\n  }\r\n\r\n  deleteMothod(url, loading = true) {\r\n    return this.handleFlow(this.axios.delete(url, this.axiosConfig), loading);\r\n  }\r\n\r\n  handleFlow(method, loading = true) {\r\n    store.dispatch(set_spinner_start());\r\n\r\n    return new Promise((resolve, reject) => {\r\n      method\r\n        .then((res) => {\r\n          store.dispatch(set_spinner_end());\r\n          resolve({\r\n            data: res.data,\r\n            status: res.status,\r\n            isSuccess: true,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          store.dispatch(set_spinner_end());\r\n          this.handleError(err);\r\n          reject({\r\n            err: err,\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  handleError = (err) => {\r\n    const status = err.response?.status;\r\n    switch (\r\n      status\r\n      // case 400:\r\n      // case 401:\r\n      // case 403:\r\n      //   window.location.assign(\"/lms\");\r\n      //   break;\r\n      // default:\r\n      //   break;\r\n    ) {\r\n    }\r\n  };\r\n  //\r\n  axiosInstance = (req) => {\r\n    this.axios(req, this.axiosConfig);\r\n  };\r\n}\r\n\r\nconst AxiosServ = new AxiosService();\r\nexport default AxiosServ;\r\n"]},"metadata":{},"sourceType":"module"}